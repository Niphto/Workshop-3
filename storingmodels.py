# -*- coding: utf-8 -*-
"""storingmodels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12SzdnHuKKulwqBRUNHGKl4YI_l3mZE2a
"""

import json

# Path to store model metrics and funds information
MODEL_INFO_PATH = 'model_info_store.json'

def fetch_model_info():
    try:
        with open(MODEL_INFO_PATH, 'r') as file_handle:
            return json.load(file_handle)
    except FileNotFoundError:
        return {}

def write_model_info(info):
    with open(MODEL_INFO_PATH, 'w') as file_handle:
        json.dump(info, file_handle, indent=4)

def initialize_model_entry(model_identifier, seed_fund=1000):
    info = fetch_model_info()
    if model_identifier in info:
        print(f"The model '{model_identifier}' has already been initialized.")
        return
    info[model_identifier] = {'funds': seed_fund, 'performance_score': 0}
    write_model_info(info)
    print(f"Model '{model_identifier}' initialized with a seed fund of {seed_fund}.")

def penalize_model(model_identifier, deduction):
    info = fetch_model_info()
    if model_identifier not in info:
        print(f"No record found for model '{model_identifier}'.")
        return
    info[model_identifier]['funds'] -= deduction
    write_model_info(info)
    print(f"A deduction of {deduction} has been made from model '{model_identifier}'.")

def adjust_model_performance(model_identifier, new_performance):
    info = fetch_model_info()
    if model_identifier not in info:
        print(f"No record found for model '{model_identifier}'.")
        return
    info[model_identifier]['performance_score'] = new_performance
    write_model_info(info)
    print(f"Performance score of model '{model_identifier}' updated to {new_performance}.")

# Demonstration:
initialize_model_entry('Predictor X')
adjust_model_performance('Predictor X', 92.5)
penalize_model('Predictor X', 150)