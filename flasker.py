# -*- coding: utf-8 -*-
"""flasker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12SzdnHuKKulwqBRUNHGKl4YI_l3mZE2a
"""

from flask import Flask, request, jsonify
import numpy as np
import pickle
import logging

application = Flask(__name__)
logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger('ModelAPI')

MODEL_FILES = {
    'linear_regression': 'model_linear.pkl',
}

def fetch_model(model_identifier):
    if model_identifier not in MODEL_FILES:
        log.error(f"Unknown model identifier '{model_identifier}'.")
        return None
    model_file_path = MODEL_FILES[model_identifier]
    try:
        with open(model_file_path, 'rb') as model_file:
            loaded_model = pickle.load(model_file)
        log.info(f"Successfully loaded model '{model_identifier}' from {model_file_path}.")
        return loaded_model
    except FileNotFoundError:
        log.error(f"Model file '{model_file_path}' is missing.")
        return None
    except Exception as exc:
        log.error(f"Error loading model '{model_identifier}': {exc}")
        return None

@application.route('/')
def index():
    return "Welcome to the ML model serving API!"

@application.route('/predict/<model_identifier>', methods=['GET'])
def make_prediction(model_identifier):
    model = fetch_model(model_identifier)
    if not model:
        return jsonify({'error': f"Unable to load model '{model_identifier}'."}), 400
    features_query = request.args.get('features')
    if features_query:
        try:
            features_list = np.fromstring(features_query, sep=',').reshape(1, -1)
            model_prediction = model.predict(features_list)
            return jsonify({'prediction': model_prediction.tolist()[0]})
        except ValueError as error:
            return jsonify({'error': f"Invalid input: {error}"}), 400
        except Exception as general_error:
            return jsonify({'error': f"Prediction error: {general_error}"}), 500
    else:
        return jsonify({'error': 'No input features provided'}), 400

if __name__ == '__main__':
    application.run(debug=True, host='0.0.0.0', port=8080)